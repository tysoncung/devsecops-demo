name: Demo Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-demo:
    name: Security Scanning Demo
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Install dependencies
      - name: Install Dependencies
        run: |
          echo "üì¶ Installing Node.js dependencies..."
          npm install
      
      # ESLint Security Check
      - name: ESLint Security Analysis
        id: eslint
        continue-on-error: true
        run: |
          echo "üîç Running ESLint security checks..."
          npm run lint 2>&1 | tee eslint-output.txt || true
          ERRORS=$(grep -c "error" eslint-output.txt || echo "0")
          WARNINGS=$(grep -c "warning" eslint-output.txt || echo "0")
          echo "Found $ERRORS errors and $WARNINGS warnings"
          echo "eslint_errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "eslint_warnings=$WARNINGS" >> $GITHUB_OUTPUT
      
      # Secret Detection with Gitleaks
      - name: Secret Detection
        id: secrets
        continue-on-error: true
        run: |
          echo "üîê Scanning for secrets..."
          # Install gitleaks
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          # Run scan but don't fail the pipeline
          ./gitleaks detect --source . --verbose --no-git --redact 2>&1 | tee gitleaks-output.txt || true
          if grep -q "leaks found" gitleaks-output.txt; then
            echo "secrets_found=true" >> $GITHUB_OUTPUT
          else
            echo "secrets_found=false" >> $GITHUB_OUTPUT
          fi
      
      # Dependency Audit
      - name: Dependency Security Audit
        id: audit
        continue-on-error: true
        run: |
          echo "üìã Auditing dependencies..."
          npm audit 2>&1 | tee audit-output.txt || true
          if grep -q "found 0 vulnerabilities" audit-output.txt; then
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          else
            VULN_COUNT=$(grep -oP '\d+(?= vulnerabilities)' audit-output.txt | head -1 || echo "0")
            echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
            echo "vulnerability_count=$VULN_COUNT" >> $GITHUB_OUTPUT
          fi
      
      # Snyk Security Scan
      - name: Snyk Vulnerability Scan
        id: snyk
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
      
      # OWASP Dependency Check
      - name: OWASP Dependency Check
        id: owasp
        continue-on-error: true
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'devsecops-demo'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
            --prettyPrint
      
      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        continue-on-error: true
        with:
          languages: javascript
      
      - name: Perform CodeQL Analysis
        id: codeql
        uses: github/codeql-action/analyze@v3
        continue-on-error: true
      
      # SAST with Semgrep
      - name: Semgrep SAST Analysis
        id: semgrep
        continue-on-error: true
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/javascript
      
      # Docker Build and Scan
      - name: Docker Security Scan
        id: docker
        continue-on-error: true
        run: |
          echo "üê≥ Building Docker image..."
          # Create healthcheck file if it doesn't exist
          if [ ! -f healthcheck.js ]; then
            cat << 'EOF' > healthcheck.js
          console.log('Health check OK');
          process.exit(0);
          EOF
          fi
          
          # Build image
          docker build -t devsecops-demo:test . 2>&1 | tee docker-build.txt
          
          if [ $? -eq 0 ]; then
            echo "docker_build=success" >> $GITHUB_OUTPUT
            
            # Quick vulnerability scan with trivy
            echo "üîç Scanning Docker image for vulnerabilities..."
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              aquasec/trivy image --severity HIGH,CRITICAL --no-progress \
              devsecops-demo:test 2>&1 | tee trivy-output.txt || true
          else
            echo "docker_build=failed" >> $GITHUB_OUTPUT
          fi
      
      # Generate Summary Report
      - name: Generate Security Report
        if: always()
        run: |
          echo "# üîí DevSecOps Security Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # ESLint Results
          if [ "${{ steps.eslint.outputs.eslint_errors }}" != "" ] && [ "${{ steps.eslint.outputs.eslint_errors }}" != "0" ]; then
            echo "| ESLint | ‚ö†Ô∏è Issues Found | ${{ steps.eslint.outputs.eslint_errors }} errors, ${{ steps.eslint.outputs.eslint_warnings }} warnings |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ESLint | ‚úÖ Completed | Security analysis completed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Secret Detection Results
          if [ "${{ steps.secrets.outputs.secrets_found }}" == "true" ]; then
            echo "| Secret Detection | üî¥ Secrets Found | Hardcoded credentials detected (demo) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Secret Detection | ‚úÖ Clean | No secrets detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Dependency Audit Results
          if [ "${{ steps.audit.outputs.vulnerabilities_found }}" == "true" ]; then
            echo "| NPM Audit | ‚ö†Ô∏è Vulnerabilities | ${{ steps.audit.outputs.vulnerability_count }} vulnerabilities found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| NPM Audit | ‚úÖ Secure | No vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Snyk Results
          if [ "${{ steps.snyk.outcome }}" == "success" ]; then
            echo "| Snyk | ‚úÖ Scanned | Dependency analysis completed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.snyk.outcome }}" == "skipped" ]; then
            echo "| Snyk | ‚è≠Ô∏è Skipped | Configure SNYK_TOKEN secret to enable |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snyk | ‚ö†Ô∏è Issues Found | Vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # OWASP Dependency Check Results
          if [ "${{ steps.owasp.outcome }}" == "success" ]; then
            echo "| OWASP Check | ‚úÖ Completed | Dependency analysis completed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| OWASP Check | ‚ö†Ô∏è Issues Found | Check report for details |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # CodeQL Results
          if [ "${{ steps.codeql.outcome }}" == "success" ]; then
            echo "| CodeQL | ‚úÖ Completed | Advanced SAST analysis completed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| CodeQL | ‚ö†Ô∏è Analysis | Security patterns detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Semgrep Results
          if [ "${{ steps.semgrep.outcome }}" == "failure" ]; then
            echo "| Semgrep SAST | ‚ö†Ô∏è Issues Found | Security patterns detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Semgrep SAST | ‚úÖ Completed | Analysis completed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Docker Results
          if [ "${{ steps.docker.outputs.docker_build }}" == "success" ]; then
            echo "| Container Scan | ‚úÖ Built | Image built and scanned |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Container Scan | ‚ö†Ô∏è Issues | Check build logs |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìù Important Note" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> **This repository contains intentional security vulnerabilities for DevSecOps demonstration purposes.**" >> $GITHUB_STEP_SUMMARY
          echo "> " >> $GITHUB_STEP_SUMMARY
          echo "> All findings are expected and demonstrate how various security tools detect different types of issues:" >> $GITHUB_STEP_SUMMARY
          echo "> - SQL Injection vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "> - Hardcoded secrets and credentials" >> $GITHUB_STEP_SUMMARY
          echo "> - Command injection risks" >> $GITHUB_STEP_SUMMARY
          echo "> - Weak cryptography usage" >> $GITHUB_STEP_SUMMARY
          echo "> - Path traversal vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚úÖ Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**All security scans completed successfully!** The pipeline is configured to continue despite findings to demonstrate the full security scanning capabilities." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Generated at: $(date)_" >> $GITHUB_STEP_SUMMARY